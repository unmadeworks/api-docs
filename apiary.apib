FORMAT: 1A
HOST: https://partner-subdomain.embed.unmade.com/

# Unmade Integration Reference

## Integrating with Unmade

Unmade integration into your e-commerce site relies on 4 key steps:
1. **Product setup**
Customisable products within your e-commerce site need to store a reference that can link them to the corresponding Unmade Editor.

2. **Editor integration**
The Unmade Editor is embedded to the product detail page of customisable products using an `<iframe>`.

3. **Save DesignID**
When users have finished customising, your e-commerce site needs to store a unique Design ID throughout your native checkout process.

4. **Order creation**
Once the purchase has happend through your existing systems, the Design ID needs to be used to trigger the order creation within Unmade.

Further to these core steps, we provide additional APIs that allow you to build more advanced customer journeys and integration:
- **Order API** In addition to order generation, you can retrieve order data using this API to get production state and tracking number.
- **Design API** You can get rendered images of a customer's design using this API and the Design ID the Editor has provided.
- **Factory API** Your factories can use our Web interface to download manufacturing data, or this API.

### Typical user journey through e-commerce site
![Image](https://raw.githubusercontent.com/marcharlier/apiray-images/master/Apiary_CustomerJourney.png)

## API setup

### Partner-specific sub-domains
Each integration with Unmade will run on partner-specific resources. This means the URLs shown throughout this documentation are just examples and you should get your specific URL from your Unmade customer contacts.

``` https://{your-partner-subdomain}.embed.unmade.com/ ```

### Authorization
The Unmade APIs use Token Authentication. Your unique token will be provided to you by Unmade and needs to be used in the header of your API requests like so:
|Key | Value|
|---|---|
|`Authorization`| `Token ABC123123`|

### Error responses
Error responses from our API endpoints adhere to RESTful standards. The numeric HTTP status code reported by the web
server can be used to determine the reason for the request failing to return a successful response (e.g. 404, meaning resource not found).

We also include a `code` and a human readable message. This could be used for your logging purposes, if they need to be read by humans.
We do not recommend writing any logic that depends on the exact text of the message e.g. using a regex or string matching.
These messages are more likely to be subject to change, whereas response status and code are less likely to change.

In addition to this, and in a deviation from a RESTful approach, we will also return the original request that was sent
back to you, in the error response body. We take this verbose approach as we feel it offers maximum flexibility for
developers working in various systems and technologies. And that will be included under the `original_request` key.

As an example of an error response:

**Response 400** (application/json)
```
{
    "code": "bad_request",
    "message": "Request payload is not valid.",
    "original_request": {
        // returns your original request sent
    }
} 
```
## Group Unmade Editor
The Unmade Editor is the web interface that lets users customise a product and visualises the customisation choices in real-time using Unmade's photo-realistic visualisation technology.
Each customisable product we have jointly developed has it's own specific Iframe URL - even if the underlying customisation editor (the options available and the user interface) are the same.

The Editor is embedded into your website as an `<iframe>` element and you can send specific attributes to affect localisation, the price displayed or load a previously created design as a starting point.
There are multiple different ways in which you can chose to integrate the Unmade Editor into the customer experience you are building - this means that the integration of the actual `<iframe>` can be different on a case-by-case basis and we are happy to assist and advise on this.

An example of how you may want to embed the iframe is below:
```
<iframe
  src="<URL>"           // Iframe endpoint URL
  frameborder="0"       // Set to no border
  width="100%"          // Width set to 100%
  height="100%"         // Height set to 100%
  scrolling="no">       // Scrolling turned off
</iframe>
```

### Unmade Editor integration [/v1/products/{slug}/{?price,ccy,locale,design_id}]

+ Parameters
    + slug - The product slug (will be agreed with you)
    + price (optional, number) - The price to display for the product
    + ccy (optional) - The ISO 4217 currency code corresponding to the `price`
    + locale (optional) - The IETF language tag to set localisation of the user interface
        + Default: `en-GB`
    + design_id (optional) - An Unmade Design ID that is compatible with this editor to be used as starting point

### Iframe endpoint [GET]

The response to this request is a well-formed HTML document used as content for the `<iframe>`.

Use this URL as the `src` attribute value on an `<iframe>` element to embed an Unmade-powered product in an
external e-commerce website.  Note that there are optional query parameters.

Depending on your specific editor UI design and the rest of the content on the page you are embedding the Unmade Iframe on, you might need to take different approaches to managing the size of the `<iframe>` element on the page. We are happy to advise and support on this.


+ Response 200 (text/html)

+ Response 404 (application/json)

        {
            "code": "not_found",
            "message": "Not found."
        }

+ Response 405 (application/json)

        {
            "code": "method_not_allowed",
            "message": "Method used is not allowed"
        }

+ Response 406 (application/json)

        {
            "code": "not_acceptable",
            "message": "Could not satisfy the request Accept header."
        }

+ Response 415 (application/json)

        {
            "code": "unsupported_media_type",
            "message": "Unsupported media type in request."
        }

+ Response 429 (application/json)

        {
            "code": "throttle_request",
            "message": "tRequest was throttled."
        }


## Group JS post messaging interactions

### JS post messaging in general
Certain actions performed by the customer in the iframe will result in events being sent to
the host website using the [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
API. A JavaScript listener, such as the following, should be implemented on the host site:

```
window.addEventListener("message", receiveMessage, false);

function receiveMessage (event) {
  var origin = event.origin || event.originalEvent.origin;
  if (origin === "https://{your-partner-subdomain}.embed.unmade.com/") {
    switch (event.data.type) {
        case 'UNMADE_design_saved':
            addToCart(event.data.payload);
        case 'UNMADE_interaction':
            resizeIFrame(event.data.payload);
        case 'UNMADE_stock_response':
            openModal(event.data.payload);
        default:
            break;
    }
  }
}
```

### Saved design
```type: "UNMADE_design_saved"``` **required**

Once a customer has finished creating their design in the Unmade Editor and click "save" or "add to bag" within the Iframe, Unmade will save the user's design, generate a `DesignID` and pass this ID to you by Post Messaging to the parent window.
In addition to the `DesignID`, this postMessage also includes the URL to a preview image you can immediately access (for example, to show the custom design during the checkout process) and other details about the user's design.

Please note that the payload of this message is identical in structure as the response of the [Design API](#reference/design-api) described further below.

Example postMessage:
```
{
  type: "UNMADE_design_saved",
  payload: {
    id: "0c9e9b2b-ee60-439a-9172-819df97d7987",     // Design ID
    product: "https://URL/US247MK1/",               // URL of the Unmade editor
    preview: "https://URL/preview.png",             // Preview image
    description: “NB247_2018_V2_R in Navy, Grey & Orange",
    size: "7D",
    gender: "Mens",
    stylecode: "US247MK1",
    secondary_previews: [                 // Array listing more previews
      {
        "name": "right",        // Pre-agreed preview name
        "image": null           // The URLs are `null` until rendered
      }
    ],
    components: [
      {
        component_name: "B02",
        component_displayname: "Eyerow",
        option_name: "BXB02ABC123",
        option_displayname: "Blue"
      }
    ]
  }
}
```


### User interaction
```type: "UNMADE_interaction"``` *optional*

We can optionally configure to send the Parent Window a message to trigger interactions event outside the Unmade Iframe.
For example, if within the Unmade Iframe there is a link to a Size Guide that should trigger a modal handled by the parent window.

### Component availability
```type: "UNMADE_ready"``` *optional*

```type: "UNMADE_stock_available"``` *optional*

```type: "UNMADE_stock_response"``` *optional*

If configured and agreed with Unmade, you can initialise the Unmade Editor with option availability data to make specfiic customisation options unavailable for consumers to pick. (For example if you have run out of stock).
To turn specific options within the customisation editor off, the `<iframe>` needs to receive a postMessage specifying the available options as component names and option names matching the ones set up within the Unmade system.
Note that this is supported as a "whitelist" approach: To turn options off, the list of all available options is sent and the missing options will be marked unavailable.


## Group Design API
### Retrieve designs [/v1/designs/{design_id}/]

Once a user has created a design using and Unmade Editor and you have saved the Design ID, you can use the Design API to request further images and information on that saved design.
This lets you:
- download multiple high resolution renders of the design to show in your customer journey, use in retargeting or a "my account" section of your website
- identify the URL of the Unmade Editor used to create this design, so that you can construct a URL to load the Editor with this Design ID as a starting point
- get structured data about some of the customisation choices made, this currently only covers size, gender and trims (such as zips) chosen.

### Retrieve a design [GET]

+ Parameters
    + design_id (uuid) - ID of the Design in the form of a uuid

+ Request
    + Headers

            Authorization: Token ABCDEF
            
+ Response 200 (application/json)

        {
            "id": "8a2b6517-e020-46fd-8cd0-ec441d4ac4b4",
            "product": "<Unmade Editor URL>",
            "preview": "<URL to the main rendering of the design>",
            "description": "<Description of the product and design>",
            "secondary_previews": [],
            "size": "<Size selected>",
            "gender": "<Gender selected>",
            "stylecode": "<Stylecode selected>",
            "components": []
        }

+ Response 400 (application/json)

        {
            "code": "bad_request",
            "message": "Request payload is not valid."
        }

+ Response 404 (application/json)

        {
            "code": "not_found",
            "message": "Not found."
        }

+ Response 405 (application/json)

        {
            "code": "method_not_allowed",
            "message": "Method used is not allowed"
        }

+ Response 406 (application/json)

        {
            "code": "not_acceptable",
            "message": "Could not satisfy the request Accept header."
        }

+ Response 415 (application/json)

        {
            "code": "unsupported_media_type",
            "message": "Unsupported media type in request."
        }


## Group Orders API
### Create Order [/v1/orders/]

Once an order has been placed on the e-commerce platform, the Unmade system should be notified
so we can send the design to your factory and generate the manufacturing data for it.

### Create an Order [POST]

#### Order field rules

For an order to be created the following fields will need to be present:

|Key|Required?|Description|
|---|---|---|
|`reference`| **required** | (Cannot be blank and cannot exist already. Max chars: 256)|
|`shipping_address`| **required object**| Object containing the following:|
|└ `name`|**required**|(max chars: 256)|
|└ `address_1`|**required**|(max chars: 256)|
|└ `postal_code`|**required**|(max chars: 20)|
|└ `city`| **required**| (max chars: 256)|
|└ `country`| **required**| (must be an ISO 3166-1 country)|
|└ `company_name`| *optional*| (max chars: 256)|
|└ `address_2`| *optional*| (max chars: 256)|
|└ `country_area`| *optional*| (max chars: 128)|
|└ `phone`| *optional*| (max chars: 30)|
|`order_items`| **required array**| Array where each item has:|
|└ `design`| **required**| The Unmade Design Id of the design to be ordered.|
|└ `quantity`| *optional*| Defaults to *1*.|
|└ `options`| **required object**| Object that must include `size`|
|&nbsp;&nbsp;&nbsp;&nbsp;└ `size`| **required** | Pre-agreed values, usually: "XXS", "XS", "S", "M", "L", "XL", "XXL", "3XL", "One Size"|
|&nbsp;&nbsp;&nbsp;&nbsp;└ `partner_data`| *optional*| Undetermined key value pairs (order item level).|
|`partner_data`| *optional*| Undetermined key value pairs (order level).|


+ Request Order with optional partner data (application/json)
    + Headers

            Authorization: Token ABCDEF

    + Body

            {
                "reference": "YOUR ORDER REFERENCE",
                "partner_data": {
                    "example_po_number": "example_number",
                    "example_po_type": "example_value",
                    "example_shipping_method": "example_shipping_service"
                },
                "order_items": [
                    {
                        "design": "3cd42fe8-7491-11e8-adc0-fa7ae01bbebc",
                        "quantity": 2,
                        "options": {
                            "size": "M"
                        },
                        "partner_data": {
                            "barcode": "98323928238372"
                        }
                    }
                ],
                "shipping_address": {
                    "name": "John Smith",
                    "company_name": "unmade",
                    "address_1": "152 Strand"
                    "address_2": "Somerset House",
                    "city": "London",
                    "country_area": "",
                    "postal_code": "WC2R 1LA",
                    "country": "UK",
                    "phone": ""
                }
            }

+ Response 201 (application/json)

        {
            "id": "c9b86945-45a6-4a43-beaf-361a7f0d8a77"
        }

+ Response 400 (application/json)

        {
            "code": "bad_request",
            "message": "Request payload is not valid.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 401 (application/json)

        {
            "code": "authentication_failed",
            "message": "Incorrect authentication credentials.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 404 (application/json)

        {
            "code": "not_found",
            "message": "Not found.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 405 (application/json)

        {
            "code": "method_not_allowed",
            "message": "Method used is not allowed",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 406 (application/json)

        {
            "code": "not_acceptable",
            "message": "Could not satisfy the request Accept header.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 415 (application/json)

        {
            "code": "unsupported_media_type",
            "message": "Unsupported media type in request.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Request Team wear order (application/json)
    + Headers

            Authorization: Token ABCDEF

    + Body

            {
                "reference": "YOUR ORDER REFERENCE",
                "partner_data": {
                    "example_po_number": "example_number",
                    "example_po_type": "example_value",
                    "example_shipping_method": "example_shipping_service"
                },
                "order_items": [
                    {
                        "design": "3cd42fe8-7491-11e8-adc0-fa7ae01bbebc",
                        "quantity": 2
                        "options" : {
                            "size": "L"
                        },
                        "partner_data": {
                            "barcode": "98323928238372"
                        }
                    },
                    {
                        "design": "3cd42fe8-7491-11e8-adc0-fa7ae01bbebc",
                        "quantity": 3
                        "options" : {
                            "size": "M"
                        },
                        "partner_data": {
                            "barcode": "98323928238372"
                        }
                    },
                    {
                        "design": "3cd42fe8-7491-11e8-adc0-fa7ae01bbebc",
                        "quantity": 1
                        "options" : {
                            "size": "S"
                        },
                        "partner_data": {
                            "barcode": "98323928238372"
                        }
                    }
                    
                ],
                "shipping_address": {
                    "name": "John Smith",
                    "company_name": "unmade",
                    "address_1": "152 Strand"
                    "address_2": "Somerset House",
                    "city": "London",
                    "country_area": "",
                    "postal_code": "WC2R 1LA",
                    "country": "UK",
                    "phone": ""
                }
            }

+ Response 201 (application/json)

        {
            "id": "25f5bcd3-ace3-4272-956b-f78fe55ab8f1"
        }

+ Response 400 (application/json)

        {
            "code": "bad_request",
            "message": "Request payload is not valid.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 401 (application/json)

        {
            "code": "authentication_failed",
            "message": "Incorrect authentication credentials.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 404 (application/json)

        {
            "code": "not_found",
            "message": "Not found.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 405 (application/json)

        {
            "code": "method_not_allowed",
            "message": "Method used is not allowed",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 406 (application/json)

        {
            "code": "not_acceptable",
            "message": "Could not satisfy the request Accept header.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

+ Response 415 (application/json)

        {
            "code": "unsupported_media_type",
            "message": "Unsupported media type in request.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

### Retrieve Order [/v1/orders/{order_id}/]

### Retrieve an existing order [GET]

If you want to receive information on an order, for example to check the order state.

#### Order States

As an order progresses through its life-cycle it will adopt one of a number of order states.
The state of an order is provided on an order's `state` attribute and will be one of the
following values:

| Order state | Description |
| --- | --- |
|`new`|This order has been received by Unmade, but is not in production yet.|
|`submitting`| This order is being sent to the factory for production.|
|`submitted`|This order has been sent to the factory for production.|
|`ready_to_ship`|This order is waiting to be picked up at the factory.|
|`shipped`|The factory has marked this order as shipped.|
|`cancelled`|This order has been cancelled.|
|`hold`|This order is on hold.|
|`failed`|This order has failed. (Error state, please contact Unmade)|
|`uninitialised`|This order is not complete. (Error state, please contact Unmade)|

+ Parameters
    + order_id (uuid) - ID of the Order in the form of a uuid

+ Request
    + Headers

            Authorization: Token ABCDEF

+ Response 200 (application/json)

        {
            "id": "25f5bcd3-ace3-4272-956b-f78fe55ab8f1",
            "shipping_address" : {
                "name": "John Smith",
                "company_name": "unmade",
                "address_1": "152 Strand",
                "address_2": "Somerset House",
                "city": "London",
                "country_area": "",
                "postal_code": "WC2R 1LA",
                "country": "UK",
                "phone": ""
            },
            "reference": "partner_order_reference",
            "created": "2018-04-11T17:20:04.991263Z",
            "state": "new",
            "partner_data":{
                "customer_po_number": "1234512334X"
            },
            "order_items": [
                {
                    "design": "3cd42fe8-7491-11e8-adc0-fa7ae01bbebc",
                    "quantity": 1,
                    "partner_data": {
                        "barcode": "98323928238372"
                    }
                },
                {
                    "design": "44dcbb2e-7491-11e8-adc0-fa7ae01bbebc",
                    "quantity": 3,
                    "partner_data": {
                        "barcode": "98329845228372"
                    }
                }
            ]
        }

+ Response 400 (application/json)

        {
            "code": "bad_request",
            "message": "Request payload is not valid."
        }

+ Response 401 (application/json)

        {
            "code": "authentication_failed",
            "message": "Incorrect authentication credentials."
        }

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action."
        }

+ Response 404 (application/json)

        {
            "code": "not_found",
            "message": "Not found."
        }

+ Response 405 (application/json)

        {
            "code": "method_not_allowed",
            "message": "Method used is not allowed"
        }

+ Response 406 (application/json)

        {
            "code": "not_acceptable",
            "message": "Could not satisfy the request Accept header."
        }

+ Response 415 (application/json)

        {
            "code": "unsupported_media_type",
            "message": "Unsupported media type in request."
        }

## Group Factory API

Unmade offers a web-based Order Management System called Factory OMS which allows factories to receive custom order data, download production files and track the production status.
The Factory API lets you programatically do these steps without needing to use the user interface.

Manufacturing files are only available once a Design ID has been turned into an order (using the Order API) or once you have created a singular manufacturing job from this Design ID.

This API provides manufacturing files as "sequences" of production jobs that belong together.
A sequence is a collection of jobs that have a relationship relevant for production (such as using the same yarn feeder setup on a knitting machine). A sequence can have jobs from multiple different orders.
An order is a collection of jobs that belong to the same customer order.
A job is an individual design (size specific) that has manufacturing files.

### Job [/factories/{factory_slug}/jobs/]


### Create a New Job [POST]

If you are not using the Order API to create jobs within the Unmade system - you can use this request to create individual jobs.

|Key|Required?|Description|
|---|---|---|
|`design_id`|**required**|The ID generated by the Unmade Editor when a customer creates their Design.|
|`reference`|**required**|Should uniquely identify the Job to be created. Will be present on all paperwork and associated manufacturing files.|

+ Request (application/json)
    + Headers

            Authorization: Token ABCDEFGHIJKLMNOPQRSTUVWXY
    
    + Body

            {
                "design_id": "DESIGN_ID",
                "reference": "REFERENCE"
            }

+ Response 201

            {
                "id": "JOB_ID",
                "reference": "REFERENCE-TEXT"
            }

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

### Sequence [/factories/{factory_slug}/sequences/]

### Get Sequences [GET]

Periodically at an agreed time, Unmade will automatically group created Jobs into efficient manufacturable Sequences. This is called "Auto sequencing". These Sequences are created to:
 - Minimise manufacture time by grouping compatible Jobs - reducing the time spent reconfiguring machines
 - Make best use of available capacity by evenly distributing Jobs across available machines
 
This endpoint allows these Sequences to be retrieved when required for manufacture.

The endpoint returns an array of Sequence objects, each of which contains:

|Key|Description|
|---|---|
|`id`|The unique ID of this Sequence within Unmade systems|
|`machine`|The name of the machine to which this Sequence has been assigned|
|`jobs`|An array of `Job` objects, each containing:|
|└ `id`|The unique ID of this Job within Unmade systems|
|└ `reference`|The reference given when creating this Job|
|└ `job_ticket`|A URL that returns a PDF Job Ticket containing relevant manufacturing and QC information for this Job|
|└ `manufacture_files`|A URL that returns a zip archive containing the manufacture files for this Job|
|└ `previews`|An array of `Preview` objects, each containing:|
|&nbsp;&nbsp;&nbsp;&nbsp;└ `name`| This preview's name|
|&nbsp;&nbsp;&nbsp;&nbsp;└ `image`| A URL to the image|

+ Request (application/json)
    + Headers

            Authorization: Token ABCDEFGHIJKLMNOPQRSTUVWXY

+ Response 200 (application/json)
    
    + Body

            [
                {
                    "id": "SEQUENCE_ID",
                    "machine": "MACHINE_NAME",
                    "jobs": [
                        {
                            "id": "JOB_ID",
                            "reference": "REFERENCE",
                            "job_ticket": "https://example.com/JOB_ID_ticket.pdf",
                            "manufacture_files": "https://example.com/JOB_ID_panels.zip",
                            "previews": [
                                {
                                    "name": "PREVIEW_NAME",
                                    "image": "https://example.com/JOB_ID_PREVIEW_NAME.png"
                                }
                            ]
                        }
                    ]
                }
            ]

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

### Sequence: Set In Production [/factories/{factory_slug}/sequences/{sequence_id}/set_in_production/]

### Set a Sequence as 'in_production' [PUT]

In order to confirm you have successfully downloaded all files, and to remove the sequence from appearing in the “Get Sequences” call, you need to set each sequence as “in production”.
If you haven't downloaded the sequence files and don't set sequences to `in_production`, they remain in the [Get Sequences](https://unmadefactory.docs.apiary.io/#reference/0/sequence/get-sequences) list and the next time the "auto sequencing" logic runs, they will be combined further with new jobs to create even more efficient sequences.

Sequence IDs are provided in the [Get Sequences](https://unmadefactory.docs.apiary.io/#reference/0/sequence/get-sequences) response.

+ Request (application/json)
    + Headers

            Authorization: Token ABCDEFGHIJKLMNOPQRSTUVWXY

    + Parameters
        + sequence_id (str) - Unmade Sequence ID

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }

### Job: Set Complete [/factories/{factory_slug}/jobs/{job_id}/set_complete/]
        
### Set a Job as 'complete' [PUT]

Once a Job has been successfully manufactured and QC'd within the partner factory, it can be marked as `complete` within Unmade systems. When all Jobs for a given Sequence are complete, the Sequence is also marked as complete.

Job IDs are provided in the [Get Sequences](https://unmadefactory.docs.apiary.io/#reference/0/sequence/get-sequences) response.

+ Request (application/json)
    + Headers

            Authorization: Token ABCDEFGHIJKLMNOPQRSTUVWXY

    + Parameters
        + job_id (str) - Unmade Job ID

+ Response 200 (application/json)

+ Response 403 (application/json)

        {
            "code": "permission_denied",
            "message": "You do not have permission to perform this action.",
            "original_request": "<the original request that was sent, which resulted in this error>"
        }